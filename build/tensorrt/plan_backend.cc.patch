diff --git a/src/backends/tensorrt/plan_backend.cc b/src/backends/tensorrt/plan_backend.cc
index 695865e..34b432c 100644
--- a/src/backends/tensorrt/plan_backend.cc
+++ b/src/backends/tensorrt/plan_backend.cc
@@ -495,12 +495,11 @@ PlanBackend::Context::InitializeInputBinding(
 
     MemoryFormat fmt =
         ConvertTrtFmtToFmt(engine_->getBindingFormat(binding_index));
-    if (fmt != MemoryFormat::LINEAR) {
+    if (fmt == MemoryFormat::INVALID) {
       return Status(
           RequestStatusCode::INVALID_ARG,
-          "unexpected tensor format " + MemoryFormat_Name(fmt) +
-              " for input '" + input_name +
-              "'. Only LINEAR memory format is supported at present.");
+          "unexpected tensor format " + MemoryFormat_Name(fmt) + " for input '" +
+              input_name + "'.");
     }
 
     nvinfer1::Dims engine_dims = engine_->getBindingDimensions(binding_index);
@@ -512,7 +511,7 @@ PlanBackend::Context::InitializeInputBinding(
     if (!(is_control && is_dynamic_)) {
       RETURN_IF_ERROR(CompareDimsSupported(
           name_, input_name, engine_dims, model_config_dims, support_batching,
-          is_dynamic_));
+          is_dynamic_, fmt));
     } else {
       Status status = ValidateControlDimsDynamic(engine_dims, support_batching);
       if (!status.IsOk()) {
@@ -710,12 +709,11 @@ PlanBackend::Context::InitializeConfigOutputBindings(
 
       MemoryFormat fmt =
           ConvertTrtFmtToFmt(engine_->getBindingFormat(binding_index));
-      if (fmt != MemoryFormat::LINEAR) {
+      if (fmt == MemoryFormat::INVALID) {
         return Status(
             RequestStatusCode::INVALID_ARG,
             "unexpected tensor format " + MemoryFormat_Name(fmt) +
-                " for output '" + io.name() +
-                "'. Only LINEAR memory format is supported at present.");
+                " for output '" + io.name() + "'.");
       }
 
       const DimsList& model_config_dims =
@@ -724,7 +722,7 @@ PlanBackend::Context::InitializeConfigOutputBindings(
       nvinfer1::Dims engine_dims = engine_->getBindingDimensions(binding_index);
       RETURN_IF_ERROR(CompareDimsSupported(
           name_, io.name(), engine_dims, model_config_dims, support_batching,
-          is_dynamic_));
+          is_dynamic_, fmt));
 
       int64_t byte_size;
       if (!is_dynamic_) {
